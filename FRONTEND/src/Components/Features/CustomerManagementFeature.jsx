import React, { useState, useEffect } from 'react';
import './CustomerManagementFeature.css';

const CustomerManagementFeature = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [showCustomerModal, setShowCustomerModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [customers, setCustomers] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState(null);

  // Load customers from localStorage or API
  const loadCustomers = async () => {
    setIsLoading(true);
    try {
      // Ch·ªâ load d·ªØ li·ªáu t·ª´ localStorage, kh√¥ng t·∫°o d·ªØ li·ªáu ·∫£o
      const savedCustomers = localStorage.getItem('customers');
      
      if (savedCustomers) {
        const parsedCustomers = JSON.parse(savedCustomers);
        setCustomers(parsedCustomers);
        console.log('Loaded customers:', parsedCustomers);
      } else {
        // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, ƒë·ªÉ m·∫£ng r·ªóng
        setCustomers([]);
      }
    } catch (error) {
      console.error('Error loading customers:', error);
      setCustomers([]);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadCustomers();
  }, []);

  // Filter customers based on search term
  const filteredCustomers = customers.filter(customer =>
    customer.FullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    customer.Email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    customer.PhoneNumber?.includes(searchTerm)
  );

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return new Date().toLocaleDateString('vi-VN');
    try {
      return new Date(dateString).toLocaleDateString('vi-VN');
    } catch (error) {
      return dateString;
    }
  };

  // Open customer detail modal
  const openCustomerModal = (customer) => {
    setSelectedCustomer(customer);
    setShowCustomerModal(true);
  };

  // Close customer detail modal
  const closeCustomerModal = () => {
    setSelectedCustomer(null);
    setShowCustomerModal(false);
  };

  // Handle edit customer
  const handleEditCustomer = (customer) => {
    setEditingCustomer({ ...customer });
    setShowEditModal(true);
    setShowCustomerModal(false);
  };

  // Save edited customer
  const saveEditedCustomer = () => {
    if (!editingCustomer) return;
    
    if (!editingCustomer.FullName || !editingCustomer.PhoneNumber) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (H·ªç t√™n, S·ªë ƒëi·ªán tho·∫°i)');
      return;
    }

    // Ki·ªÉm tra email tr√πng (n·∫øu c√≥ email v√† tr·ª´ ch√≠nh kh√°ch h√†ng ƒëang s·ª≠a)
    if (editingCustomer.Email) {
      const emailConflict = customers.find(c => 
        c.Email === editingCustomer.Email && c.CustomerId !== editingCustomer.CustomerId
      );
      if (emailConflict) {
        alert(`Email "${editingCustomer.Email}" ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi kh√°ch h√†ng kh√°c: ${emailConflict.FullName} (${emailConflict.PhoneNumber})`);
        return;
      }
    }

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i tr√πng (tr·ª´ ch√≠nh kh√°ch h√†ng ƒëang s·ª≠a)
    const phoneConflict = customers.find(c => 
      c.PhoneNumber === editingCustomer.PhoneNumber && c.CustomerId !== editingCustomer.CustomerId
    );
    if (phoneConflict) {
      alert(`S·ªë ƒëi·ªán tho·∫°i "${editingCustomer.PhoneNumber}" ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi kh√°ch h√†ng kh√°c: ${phoneConflict.FullName} (${phoneConflict.Email})`);
      return;
    }
    
    const updatedCustomers = customers.map(customer =>
      customer.CustomerId === editingCustomer.CustomerId ? {
        ...editingCustomer,
        lastActivity: new Date().toISOString() // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠a ƒë·ªïi
      } : customer
    );
    
    localStorage.setItem('customers', JSON.stringify(updatedCustomers));
    setCustomers(updatedCustomers);
    setShowEditModal(false);
    setEditingCustomer(null);
    
    alert('Th√¥ng tin kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
  };

  // Handle delete customer
  const handleDeleteCustomer = async (customerId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch h√†ng n√†y?')) {
      try {
        const updatedCustomers = customers.filter(c => c.CustomerId !== customerId);
        localStorage.setItem('customers', JSON.stringify(updatedCustomers));
        setCustomers(updatedCustomers);
      } catch (error) {
        console.error('Error deleting customer:', error);
      }
    }
  };

  // Calculate total spent from orders
  const calculateTotalSpent = (customer) => {
    if (!customer.orders || customer.orders.length === 0) return '0 VNƒê';
    
    const total = customer.orders.reduce((sum, order) => {
      // Parse amount from string like "500,000,000 VNƒê"
      const amount = order.amount?.replace(/[^\d]/g, '') || '0';
      return sum + parseInt(amount);
    }, 0);
    
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(total);
  };

  return (
    <div className="customer-management-feature">
      {/* Header */}
      <div className="customer-management-header">
        <div className="customer-management-header-content">
          <div className="customer-management-header-icon">üë•</div>
          <div className="customer-management-header-text">
            <h2>Qu·∫£n l√Ω kh√°ch h√†ng</h2>
            <p>Qu·∫£n l√Ω th√¥ng tin v√† d·ªØ li·ªáu kh√°ch h√†ng trong h·ªá th·ªëng</p>
          </div>
        </div>
      </div>

      {/* Controls */}
      <div className="customer-controls">
        <div className="search-section">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm kh√°ch h√†ng (T√™n, Email, SƒêT)..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
        </div>
      </div>

      {/* Customer List */}
      <div className="customers-content">
        {isLoading ? (
          <div className="loading-state">
            <div className="spinner"></div>
            <p>ƒêang t·∫£i danh s√°ch kh√°ch h√†ng...</p>
          </div>
        ) : (
          <>
            <div className="customers-grid">
              {filteredCustomers.map(customer => (
                <div key={customer.CustomerId} className="customer-card">
                  <div className="customer-header">
                    <h3>{customer.FullName}</h3>
                    <span className="customer-id">
                      #KH{customer.CustomerId?.toString().padStart(4, '0')}
                    </span>
                  </div>
                  
                  <div className="customer-info">
                    <div className="info-row">
                      <span className="info-label">üë§ H·ªç v√† t√™n:</span>
                      <span className="info-value">{customer.FullName}</span>
                    </div>
                    <div className="info-row">
                      <span className="info-label">üìß Email:</span>
                      <span className="info-value">{customer.Email || 'Kh√¥ng c√≥'}</span>
                    </div>
                    <div className="info-row">
                      <span className="info-label">üì± S·ªë ƒëi·ªán tho·∫°i:</span>
                      <span className="info-value">{customer.PhoneNumber}</span>
                    </div>
                    <div className="info-row">
                      <span className="info-label">üìÖ Ng√†y t·∫°o:</span>
                      <span className="info-value">{formatDate(customer.CreatedDate)}</span>
                    </div>
                    <div className="info-row">
                      <span className="info-label">üöó S·ªë ƒë∆°n h√†ng:</span>
                      <span className="info-value">{customer.orders?.length || 0}</span>
                    </div>
                    <div className="info-row">
                      <span className="info-label">üí∞ T·ªïng chi ti√™u:</span>
                      <span className="info-value highlight">{calculateTotalSpent(customer)}</span>
                    </div>
                  </div>
                  
                  <div className="customer-actions">
                    <button 
                      className="btn-view"
                      onClick={() => openCustomerModal(customer)}
                      title="Xem chi ti·∫øt"
                    >
                       Chi ti·∫øt
                    </button>
                    <button 
                      className="btn-delete"
                      onClick={() => handleDeleteCustomer(customer.CustomerId)}
                      title="X√≥a kh√°ch h√†ng"
                    >
                       X√≥a
                    </button>
                  </div>
                </div>
              ))}
            </div>
            
            {filteredCustomers.length === 0 && !isLoading && (
              <div className="no-results">
                <div className="no-results-icon">üîç</div>
                <h3>Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng</h3>
                <p>
                  {searchTerm ? 
                    'Kh√¥ng c√≥ kh√°ch h√†ng n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm.' :
                    'Ch∆∞a c√≥ kh√°ch h√†ng n√†o trong h·ªá th·ªëng. H√£y t·∫°o ƒë∆°n h√†ng ƒë·ªÉ th√™m kh√°ch h√†ng m·ªõi.'
                  }
                </p>
              </div>
            )}
          </>
        )}
      </div>

      {/* Customer Detail Modal */}
      {showCustomerModal && selectedCustomer && (
        <div className="modal-overlay" onClick={closeCustomerModal}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Chi ti·∫øt kh√°ch h√†ng</h2>
              <button className="modal-close" onClick={closeCustomerModal}>√ó</button>
            </div>
            
            <div className="modal-body">
              <div className="customer-detail-section">
                <h3>Th√¥ng tin c√° nh√¢n</h3>
                <div className="detail-grid">
                  <div className="detail-item">
                    <span className="detail-label">M√£ kh√°ch h√†ng:</span>
                    <span className="detail-value">
                      #KH{selectedCustomer.CustomerId?.toString().padStart(4, '0')}
                    </span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">H·ªç v√† t√™n:</span>
                    <span className="detail-value">{selectedCustomer.FullName}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">Email:</span>
                    <span className="detail-value">{selectedCustomer.Email || 'Kh√¥ng c√≥'}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">S·ªë ƒëi·ªán tho·∫°i:</span>
                    <span className="detail-value">{selectedCustomer.PhoneNumber}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">Ng√†y t·∫°o:</span>
                    <span className="detail-value">{formatDate(selectedCustomer.CreatedDate)}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">T·ªïng chi ti√™u:</span>
                    <span className="detail-value highlight">{calculateTotalSpent(selectedCustomer)}</span>
                  </div>
                </div>
              </div>

              {/* Vehicle Purchase History */}
              <div className="customer-detail-section">
                <h3>üöó L·ªãch s·ª≠ mua xe ({selectedCustomer.orders?.length || 0} ƒë∆°n h√†ng)</h3>
                <div className="orders-history">
                  {selectedCustomer.orders?.length > 0 ? (
                    selectedCustomer.orders.map((order, index) => (
                      <div key={index} className="order-history-item">
                        <div className="order-header">
                          <span className="order-id">üìã {order.id}</span>
                          <span className="order-date">üìÖ {order.date}</span>
                          <span className={`order-status ${order.status?.toLowerCase().replace(/\s/g, '')}`}>
                            {order.status}
                          </span>
                        </div>
                        <div className="order-details">
                          <div className="vehicle-info">
                            <h4>üöó Xe ƒë√£ mua:</h4>
                            <p className="vehicle-name">{order.vehicle}</p>
                          </div>
                          <div className="order-amount">
                            <span className="amount-label">üí∞ T·ªïng ti·ªÅn:</span>
                            <span className="amount-value">{order.amount}</span>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="no-orders">
                      <div className="no-orders-icon">üöó</div>
                      <p>Kh√°ch h√†ng ch∆∞a mua xe n√†o.</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            <div className="modal-footer">
              <button className="btn-secondary" onClick={closeCustomerModal}>
                ƒê√≥ng
              </button>
              <button 
                className="btn-primary" 
                onClick={() => handleEditCustomer(selectedCustomer)}
              >
                Ch·ªânh s·ª≠a th√¥ng tin
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Customer Modal */}
      {showEditModal && editingCustomer && (
        <div className="modal-overlay" onClick={() => setShowEditModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Ch·ªânh s·ª≠a th√¥ng tin kh√°ch h√†ng</h2>
              <button className="modal-close" onClick={() => setShowEditModal(false)}>√ó</button>
            </div>
            
            <div className="modal-body">
              <div className="edit-form">
                <div className="form-group">
                  <label>H·ªç v√† t√™n: <span className="required">*</span></label>
                  <input
                    type="text"
                    value={editingCustomer.FullName || ''}
                    onChange={(e) => setEditingCustomer({...editingCustomer, FullName: e.target.value})}
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  />
                </div>
                <div className="form-group">
                  <label>Email:</label>
                  <input
                    type="email"
                    value={editingCustomer.Email || ''}
                    onChange={(e) => setEditingCustomer({...editingCustomer, Email: e.target.value})}
                    placeholder="Nh·∫≠p email (kh√¥ng b·∫Øt bu·ªôc)"
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë ƒëi·ªán tho·∫°i: <span className="required">*</span></label>
                  <input
                    type="tel"
                    value={editingCustomer.PhoneNumber || ''}
                    onChange={(e) => setEditingCustomer({...editingCustomer, PhoneNumber: e.target.value})}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  />
                </div>
              </div>
            </div>
            
            <div className="modal-footer">
              <button className="btn-secondary" onClick={() => setShowEditModal(false)}>
                H·ªßy
              </button>
              <button className="btn-primary" onClick={saveEditedCustomer}>
                L∆∞u thay ƒë·ªïi
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CustomerManagementFeature;