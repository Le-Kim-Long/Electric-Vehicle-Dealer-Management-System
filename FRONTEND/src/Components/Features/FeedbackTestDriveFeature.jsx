import React, { useState, useEffect } from 'react';
import './FeedbackTestDriveFeature.css';

const FeedbackTestDriveFeature = ({ testDriveBookings = [], quoteRequests = [] }) => {
  const [activeTab, setActiveTab] = useState('testdrives');
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);
  const [selectedTestDrive, setSelectedTestDrive] = useState(null);
  const [bookings, setBookings] = useState([]);
  const [quotes, setQuotes] = useState([]);

  // Mock data cho l·ªãch h·∫πn l√°i th·ª≠ (theo c·∫•u tr√∫c LICHHENLAITHU)
  const mockTestDrives = [
    {
      maLichHen: 1,
      maKhachHang: 101,
      customerName: 'Nguy·ªÖn VƒÉn A',
      customerPhone: '0901234567',
      customerEmail: 'nguyenvana@gmail.com',
      maXe: 1,
      vehicle: 'VinFast VF8',
      maDaiLy: 1,
      dealerName: 'VinFast Qu·∫≠n 1',
      ngayHen: '2024-02-25',
      gioHen: '09:00',
      trangThai: 'X√°c nh·∫≠n',
      ghiChu: 'Kh√°ch h√†ng quan t√¢m ƒë·∫øn t√≠nh nƒÉng t·ª± l√°i',
      ngayTao: '2024-02-20T10:30:00'
    },
    {
      maLichHen: 2,
      maKhachHang: 102,
      customerName: 'Tr·∫ßn Th·ªã B',
      customerPhone: '0902345678',
      customerEmail: 'tranthib@yahoo.com',
      maXe: 2,
      vehicle: 'VinFast VF9',
      maDaiLy: 2,
      dealerName: 'VinFast Qu·∫≠n 3',
      ngayHen: '2024-02-26',
      gioHen: '14:30',
      trangThai: 'ƒêang ch·ªù',
      ghiChu: 'L·∫ßn ƒë·∫ßu l√°i xe ƒëi·ªán, c·∫ßn h∆∞·ªõng d·∫´n k·ªπ',
      ngayTao: '2024-02-22T15:20:00'
    },
    {
      maLichHen: 3,
      maKhachHang: 103,
      customerName: 'L√™ Minh C',
      customerPhone: '0903456789',
      customerEmail: 'leminhc@outlook.com',
      maXe: 3,
      vehicle: 'VinFast VF6',
      maDaiLy: 3,
      dealerName: 'VinFast Qu·∫≠n 7',
      ngayHen: '2024-02-24',
      gioHen: '16:00',
      trangThai: 'Ho√†n th√†nh',
      ghiChu: 'Kh√°ch h√†ng h√†i l√≤ng v·ªõi hi·ªáu su·∫•t',
      ngayTao: '2024-02-18T09:15:00',
      feedback: {
        rating: 5,
        comment: 'Xe ch·∫°y √™m √°i, t√≠nh nƒÉng hi·ªán ƒë·∫°i. R·∫•t h√†i l√≤ng v·ªõi tr·∫£i nghi·ªám l√°i th·ª≠.',
        recommend: true
      }
    },
    {
      maLichHen: 4,
      maKhachHang: 104,
      customerName: 'Ph·∫°m VƒÉn D',
      customerPhone: '0904567890',
      customerEmail: 'phamvand@gmail.com',
      maXe: 4,
      vehicle: 'VinFast VF7',
      maDaiLy: 1,
      dealerName: 'VinFast Qu·∫≠n 5',
      ngayHen: '2024-02-23',
      gioHen: '11:00',
      trangThai: 'ƒê√£ h·ªßy',
      ghiChu: 'Kh√°ch h√†ng c√≥ vi·ªác ƒë·ªôt xu·∫•t',
      ngayTao: '2024-02-19T14:45:00'
    }
  ];

  // Load test drive bookings from localStorage
  useEffect(() => {
    const loadBookings = () => {
      try {
        const savedBookings = JSON.parse(localStorage.getItem('testDriveBookings') || '[]');
        // Combine saved bookings with mock data
        const combined = [...savedBookings, ...mockTestDrives];
        
        // Sort by creation date (newest first)
        const sorted = combined.sort((a, b) => new Date(b.ngayTao) - new Date(a.ngayTao));
        
        setBookings(sorted);
      } catch (error) {
        console.error('Error loading bookings:', error);
        setBookings(mockTestDrives);
      }
    };

    const loadQuotes = () => {
      try {
        const savedQuotes = JSON.parse(localStorage.getItem('quoteRequests') || '[]');
        const combined = [...savedQuotes, ...mockQuoteRequests];
        setQuotes(combined);
      } catch (error) {
        console.error('Error loading quotes:', error);
        setQuotes(mockQuoteRequests);
      }
    };

    // Load initial data
    loadBookings();
    loadQuotes();

    // Set up auto-refresh interval
    const interval = setInterval(() => {
      loadBookings();
      loadQuotes();
    }, 3000);

    // Clean up interval on unmount
    return () => clearInterval(interval);
  }, []);

  // Combine mock data with real bookings from localStorage
  const allTestDrives = bookings || [];

  // Mock data for quote requests (to show alongside real ones)
  const mockQuoteRequests = [
    {
      id: 'YC001',
      customerName: 'Nguy·ªÖn VƒÉn E',
      customerPhone: '0908123456',
      customerEmail: 'nguyenvane@gmail.com',
      vehicle: 'VinFast VF8 Plus',
      selectedColor: 'ƒêen',
      notes: 'Mu·ªën bi·∫øt gi√° lƒÉn b√°nh v√† ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i hi·ªán t·∫°i',
      status: 'ƒê√£ ph·∫£n h·ªìi',
      createdDate: '2024-02-23'
    },
    {
      id: 'YC002',
      customerName: 'Tr·∫ßn Th·ªã F',
      customerPhone: '0909234567',
      customerEmail: 'tranthif@yahoo.com',
      vehicle: 'VinFast VF9 Eco',
      selectedColor: 'Tr·∫Øng',
      notes: 'Quan t√¢m ƒë·∫øn ƒëi·ªÅu ki·ªán tr·∫£ g√≥p v√† b·∫£o hi·ªÉm',
      status: 'Ch·ªù x·ª≠ l√Ω',
      createdDate: '2024-02-24'
    }
  ];

  const allQuoteRequests = quotes || [];

  // Mock data cho ph·∫£n h·ªìi (theo c·∫•u tr√∫c PHANHOI)
  const mockFeedbacks = [
    {
      maPhanHoi: 1,
      maDonHang: 1001,
      orderCode: 'DH001',
      customerName: 'Nguy·ªÖn Th·ªã E',
      customerEmail: 'nguyenthie@gmail.com',
      customerPhone: '0905678901',
      noiDung: 'Th·ªùi gian ch·ªù t·∫°i showroom h∆°i l√¢u, mong shop c·∫£i thi·ªán ƒë·ªÉ kh√°ch h√†ng c√≥ tr·∫£i nghi·ªám t·ªët h∆°n.',
      ngayGui: '2024-02-22T14:30:00',
      trangThai: 'ƒêang x·ª≠ l√Ω',
      nguoiXuLy: 101,
      staffName: 'Nguy·ªÖn VƒÉn Staff',
      ngayXuLy: null,
      ghiChu: 'Kh√°ch h√†ng ph·∫£n √°nh v·ªÅ th·ªùi gian ch·ªù'
    },
    {
      maPhanHoi: 2,
      maDonHang: 1002,
      orderCode: 'DH002',
      customerName: 'Ho√†ng Minh F',
      customerEmail: 'hoangminhf@yahoo.com',
      customerPhone: '0906789012',
      noiDung: 'Xe c√≥ ti·∫øng k√™u l·∫° ·ªü b√°nh tr∆∞·ªõc sau 1 tu·∫ßn s·ª≠ d·ª•ng. Y√™u c·∫ßu ki·ªÉm tra v√† b·∫£o h√†nh.',
      ngayGui: '2024-02-21T10:15:00',
      trangThai: 'ƒê√£ x·ª≠ l√Ω',
      nguoiXuLy: 102,
      staffName: 'Tr·∫ßn Th·ªã Manager',
      ngayXuLy: '2024-02-22T09:00:00',
      ghiChu: 'ƒê√£ li√™n h·ªá v√† h·∫πn l·ªãch ki·ªÉm tra xe'
    },
    {
      maPhanHoi: 3,
      maDonHang: 1003,
      orderCode: 'DH003',
      customerName: 'V≈© Th·ªã G',
      customerEmail: 'vuthig@outlook.com',
      customerPhone: '0907890123',
      noiDung: 'ƒê·ªôi ng≈© t∆∞ v·∫•n r·∫•t nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp. R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª• c·ªßa showroom.',
      ngayGui: '2024-02-20T16:45:00',
      trangThai: 'ƒê√£ ph·∫£n h·ªìi',
      nguoiXuLy: 103,
      staffName: 'L√™ VƒÉn Staff',
      ngayXuLy: '2024-02-21T08:30:00',
      ghiChu: 'Ph·∫£n h·ªìi t√≠ch c·ª±c t·ª´ kh√°ch h√†ng'
    },
    {
      maPhanHoi: 4,
      maDonHang: 1004,
      orderCode: 'DH004',
      customerName: 'Ph·∫°m VƒÉn H',
      customerEmail: 'phamvanh@gmail.com',
      customerPhone: '0908901234',
      noiDung: 'C·∫ßn h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa xe r√µ r√†ng h∆°n. M·ªôt s·ªë ch·ª©c nƒÉng c√≤n kh√≥ hi·ªÉu.',
      ngayGui: '2024-02-23T11:20:00',
      trangThai: 'Ch∆∞a x·ª≠ l√Ω',
      nguoiXuLy: null,
      staffName: null,
      ngayXuLy: null,
      ghiChu: null
    }
  ];

  const getStatusColor = (trangThai) => {
    switch (trangThai) {
      case 'X√°c nh·∫≠n':
      case 'ƒê√£ ph·∫£n h·ªìi':
        return '#27ae60';
      case 'ƒêang ch·ªù':
      case 'ƒêang x·ª≠ l√Ω':
        return '#f39c12';
      case 'Ho√†n th√†nh':
      case 'ƒê√£ x·ª≠ l√Ω':
        return '#3498db';
      case 'ƒê√£ h·ªßy':
      case 'Ch∆∞a x·ª≠ l√Ω':
        return '#e74c3c';
      default:
        return '#95a5a6';
    }
  };

  const openFeedbackModal = (feedback) => {
    setSelectedTestDrive(feedback);
    setShowFeedbackModal(true);
  };

  return (
    <div className="feedback-testdrive-feature">
      {/* Header Section - THAY ƒê·ªîI */}
      <div className="feedback-testdrive-header">
        <div className="feedback-testdrive-header-content">
          <div className="feedback-testdrive-header-icon">üí¨</div>
          <div className="feedback-testdrive-header-text">
            <h2>Ph·∫£n h·ªìi & L√°i th·ª≠</h2>
            <p>Qu·∫£n l√Ω ph·∫£n h·ªìi kh√°ch h√†ng v√† l·ªãch h·∫πn l√°i th·ª≠ xe</p>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="feedback-tabs">
        <button 
          className={`tab-button ${activeTab === 'testdrives' ? 'active' : ''}`}
          onClick={() => setActiveTab('testdrives')}
        >
          L·ªãch l√°i th·ª≠ ({bookings.length})
        </button>
        <button 
          className={`tab-button ${activeTab === 'feedbacks' ? 'active' : ''}`}
          onClick={() => setActiveTab('feedbacks')}
        >
          Ph·∫£n h·ªìi kh√°ch h√†ng ({mockFeedbacks.length})
        </button>
        <button 
          className={`tab-button ${activeTab === 'quotes' ? 'active' : ''}`}
          onClick={() => setActiveTab('quotes')}
        >
          Y√™u c·∫ßu b√°o gi√° ({allQuoteRequests.length})
        </button>
      </div>

      {/* Action Buttons - Removed Booking Button */}
      <div className="feature-actions" style={{ display: 'none' }}>
      </div>

      {/* Test Drives Tab */}
      {activeTab === 'testdrives' && (
        <div className="testdrives-content">
          <div className="testdrives-grid">
            {allTestDrives.map(testdrive => (
              <div key={testdrive.maLichHen} className="testdrive-card">
                <div className="testdrive-header">
                  <div className="testdrive-id">LH{testdrive.maLichHen.toString().padStart(3, '0')}</div>
                  <span 
                    className="testdrive-status"
                    style={{ backgroundColor: getStatusColor(testdrive.trangThai) }}
                  >
                    {testdrive.trangThai}
                  </span>
                </div>
                
                <div className="testdrive-info">
                  <h3>{testdrive.customerName}</h3>
                  <div className="info-row">
                    <span className="info-label">M√£ KH:</span>
                    <span className="info-value">
                      {testdrive.maKhachHang ? `KH${testdrive.maKhachHang.toString().padStart(3, '0')}` : 'Ch∆∞a c√≥'}
                    </span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">Xe:</span>
                    <span className="info-value">{testdrive.vehicle}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">Ng√†y h·∫πn:</span>
                    <span className="info-value">{testdrive.ngayHen} - {testdrive.gioHen}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">ƒê·∫°i l√Ω:</span>
                    <span className="info-value">{testdrive.dealerName}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">SƒêT:</span>
                    <span className="info-value">{testdrive.customerPhone}</span>
                  </div>
                  <div className="info-row full-width">
                    <span className="info-label">Ghi ch√∫:</span>
                    <span className="info-value">{testdrive.ghiChu}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">Ng√†y t·∫°o:</span>
                    <span className="info-value">{new Date(testdrive.ngayTao).toLocaleDateString('vi-VN')}</span>
                  </div>
                </div>

                <div className="testdrive-actions">
                  <button className="btn-contact">Li√™n h·ªá</button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Feedbacks Tab */}
      {activeTab === 'feedbacks' && (
        <div className="feedbacks-content">
          <div className="feedbacks-grid">
            {mockFeedbacks.map(feedback => (
              <div key={feedback.maPhanHoi} className="feedback-card">
                <div className="feedback-header">
                  <div className="feedback-id">PH{feedback.maPhanHoi.toString().padStart(3, '0')}</div>
                  <div className="feedback-badges">
                    <span 
                      className="feedback-status"
                      style={{ backgroundColor: getStatusColor(feedback.trangThai) }}
                    >
                      {feedback.trangThai}
                    </span>
                  </div>
                </div>

                <div className="feedback-info">
                  <h3>{feedback.customerName}</h3>
                  <div className="feedback-order">ƒê∆°n h√†ng: {feedback.orderCode}</div>
                  
                  <div className="info-row">
                    <span className="info-label">Ng√†y g·ª≠i:</span>
                    <span className="info-value">{new Date(feedback.ngayGui).toLocaleDateString('vi-VN')}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">Email:</span>
                    <span className="info-value">{feedback.customerEmail}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">SƒêT:</span>
                    <span className="info-value">{feedback.customerPhone}</span>
                  </div>
                  {feedback.staffName && (
                    <div className="info-row">
                      <span className="info-label">Ng∆∞·ªùi x·ª≠ l√Ω:</span>
                      <span className="info-value">{feedback.staffName}</span>
                    </div>
                  )}
                  {feedback.ngayXuLy && (
                    <div className="info-row">
                      <span className="info-label">Ng√†y x·ª≠ l√Ω:</span>
                      <span className="info-value">{new Date(feedback.ngayXuLy).toLocaleDateString('vi-VN')}</span>
                    </div>
                  )}
                  
                  <div className="feedback-message">
                    <strong>N·ªôi dung ph·∫£n h·ªìi:</strong>
                    <p>{feedback.noiDung}</p>
                  </div>
                </div>

                <div className="feedback-actions">
                  <button className="btn-respond">Ph·∫£n h·ªìi</button>
                  <button className="btn-view">Xem chi ti·∫øt</button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Quotes Tab */}
      {activeTab === 'quotes' && (
        <div className="quotes-content">
          <div className="quotes-grid">
            {allQuoteRequests.map(quote => (
              <div key={quote.id} className="quote-card">
                <div className="quote-header">
                  <div className="quote-id">{quote.id}</div>
                  <span 
                    className="quote-status"
                    style={{ backgroundColor: getStatusColor(quote.status) }}
                  >
                    {quote.status}
                  </span>
                </div>
                
                <div className="quote-info">
                  <h4>{quote.customerName}</h4>
                  <div className="quote-contact">
                    <div>üìû {quote.customerPhone}</div>
                    {quote.customerEmail && <div>‚úâÔ∏è {quote.customerEmail}</div>}
                  </div>
                  
                  <div className="quote-vehicle">
                    <strong>Xe quan t√¢m:</strong> {quote.vehicle}
                    {quote.selectedColor && (
                      <div className="quote-color">
                        <strong>M√†u s·∫Øc:</strong> <span className="color-highlight">{quote.selectedColor}</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="quote-footer">
                    <span className="quote-date">Ng√†y t·∫°o: {quote.createdDate}</span>
                  </div>
                </div>
                
                <div className="quote-actions">
                  <button className="btn-primary">G·ª≠i b√°o gi√°</button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Removed Booking Modal - No longer needed */}

      {/* Feedback Detail Modal */}
      {showFeedbackModal && selectedTestDrive && (
        <div className="modal-overlay" onClick={() => setShowFeedbackModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Chi ti·∫øt ph·∫£n h·ªìi l√°i th·ª≠</h2>
              <button className="modal-close" onClick={() => setShowFeedbackModal(false)}>√ó</button>
            </div>
            <div className="modal-body">
              <div className="feedback-detail">
                <div className="feedback-rating">
                  <h3>ƒê√°nh gi√° t·ªïng th·ªÉ</h3>
                  <div className="rating-display">
                    <span className="rating-stars">
                      {'‚òÖ'.repeat(selectedTestDrive.feedback.rating)}
                      {'‚òÜ'.repeat(5-selectedTestDrive.feedback.rating)}
                    </span>
                    <span className="rating-text">({selectedTestDrive.feedback.rating}/5 sao)</span>
                  </div>
                </div>
                
                <div className="feedback-comment">
                  <h3>Nh·∫≠n x√©t</h3>
                  <p>"{selectedTestDrive.feedback.comment}"</p>
                </div>
                
                <div className="feedback-recommendation">
                  <h3>C√≥ gi·ªõi thi·ªáu cho b·∫°n b√® kh√¥ng?</h3>
                  <p>{selectedTestDrive.feedback.recommend ? 'C√≥, s·∫Ω gi·ªõi thi·ªáu' : 'Kh√¥ng gi·ªõi thi·ªáu'}</p>
                </div>
                
                <div className="testdrive-summary">
                  <h3>Th√¥ng tin l√°i th·ª≠</h3>
                  <div className="info-grid">
                    <p><strong>Kh√°ch h√†ng:</strong> {selectedTestDrive.customerName}</p>
                    <p><strong>Xe l√°i th·ª≠:</strong> {selectedTestDrive.vehicle}</p>
                    <p><strong>Ng√†y:</strong> {selectedTestDrive.date} - {selectedTestDrive.time}</p>
                    <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {selectedTestDrive.location}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default FeedbackTestDriveFeature;